name: Create release

on:
  push:
    branches:
      - 'release/*'

permissions:
  contents: write

jobs:
  create_tag:
    runs-on: ubuntu-latest
    outputs:
      package_version: ${{ steps.package-info.outputs.version }}

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Get package info
        id: package-info
        uses: codex-team/action-nodejs-package-info@v1.1

      - name: Create Tag if not exists
        uses: actions/github-script@v6
        env:
          TAG: v${{ steps.package-info.outputs.version }}
        with:
          script: |
            const tagName = process.env.TAG;

            try {
              // Check if the tag already exists
              await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${tagName}`
              });
              console.log(`Tag "${tagName}" already exists. Skipping creation.`);
            } catch (error) {
              if (error.status === 404) {
                console.log(`Tag "${tagName}" does not exist. Creating...`);
                await github.rest.git.createRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `refs/tags/${tagName}`,
                  sha: context.sha
                });
              } else {
                throw error;
              }
            }

  release_windows:
    needs: [create_tag]
    runs-on: windows-2019

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Set git to be case-sensitive
        run: git config core.ignorecase false
      - name: Install Node.js and NPM
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm install --legacy-peer-deps --no-audit --prefer-offline
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: "1"

      - name: Run build app
        run: npm run build:app
        env:
          NODE_ENV: production
      - name: Run package electron app for windows
        run: npm run package:electron-app:win
        env:
          NODE_ENV: production

      - name: Release windows build
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.create_tag.outputs.package_version }}
          files: |
            ./release/out/Offboard Studio Setup ${{ needs.create_tag.outputs.package_version }}.exe
            ./release/out/Offboard Studio-${{ needs.create_tag.outputs.package_version }}-x64.zip
            ./release/out/Offboard Studio-${{ needs.create_tag.outputs.package_version }}-arm64.zip
            ./docs/Help-guide.docx
      - name: Upload Windows EXE to SourceForge
        shell: bash
        env:
          SF_USERNAME: ${{ secrets.SF_USERNAME }}
          SF_PASSWORD: ${{ secrets.SF_PASSWORD }}
          SF_PROJECT: ${{ secrets.SF_PROJECT }}
        run: |
          sudo apt-get update && sudo apt-get install -y sshpass
          FILE="./release/out/Offboard Studio Setup ${{ needs.create_tag.outputs.package_version }}.exe"
          DEST="/home/frs/project/${SF_PROJECT}/release${{ needs.create_tag.outputs.package_version }}"
          sshpass -p "$SF_PASSWORD" ssh -o StrictHostKeyChecking=no "$SF_USERNAME@frs.sourceforge.net" "mkdir -p \"$DEST\""
          sshpass -p "$SF_PASSWORD" scp -o StrictHostKeyChecking=no "$FILE" "$SF_USERNAME@frs.sourceforge.net:\"$DEST\""

  release_macos:
    needs: [create_tag]
    runs-on: macos-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Set git to be case-sensitive
        run: git config core.ignorecase false

      - name: Install Node.js and NPM
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm install --legacy-peer-deps --no-audit --prefer-offline
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: "1"

      - name: Run build app
        run: NODE_ENV=production npm run build:app

      - name: Run package electron app for macOS
        run: NODE_ENV=production npm run package:electron-app:mac
        env:
          NODE_ENV: production
      
      - name: Delete existing release assets
        uses: actions/github-script@v6
        with:
          script: |
            const tag = 'v${{ needs.create_tag.outputs.package_version }}';
            // Get the release by tag
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag
            });

            // For each asset in the release, delete if name matches any in your upload list
            const assetNamesToDelete = [
              'Offboard Studio-${{ needs.create_tag.outputs.package_version }}-arm64-mac.zip',
              'Offboard Studio-${{ needs.create_tag.outputs.package_version }}-arm64.dmg',
              'Offboard Studio-${{ needs.create_tag.outputs.package_version }}-mac.zip',
              'Offboard Studio-${{ needs.create_tag.outputs.package_version }}.dmg',
              './docs/Help-guide.docx' // if you really upload this file too
            ];

            for (const asset of release.data.assets) {
              if (assetNamesToDelete.includes(asset.name)) {
                console.log(`Deleting existing asset: ${asset.name}`);
                await github.rest.repos.deleteReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  asset_id: asset.id
                });
              }
            }


      - name: Release macOS build
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.create_tag.outputs.package_version }}
          files: |
            ./release/out/Offboard Studio-${{ needs.create_tag.outputs.package_version }}-arm64-mac.zip
            ./release/out/Offboard Studio-${{ needs.create_tag.outputs.package_version }}-arm64.dmg
            ./release/out/Offboard Studio-${{ needs.create_tag.outputs.package_version }}-mac.zip
            ./release/out/Offboard Studio-${{ needs.create_tag.outputs.package_version }}.dmg
            ./docs/Help-guide.docx
      
      - name: Install expect
        run: brew install expect
      - name: Create release directory on SourceForge
        run: |
          expect <<EOF
          spawn ssh -o StrictHostKeyChecking=no ${{ secrets.SF_USERNAME }}@frs.sourceforge.net "mkdir -p /home/frs/project/${{ secrets.SF_PROJECT }}/release${{ needs.create_tag.outputs.package_version }}"
          expect "Password:"
          send "${{ secrets.SF_PASSWORD }}\r"
          expect eof
          EOF

      - name: Upload macOS DMG to SourceForge
        run: |
          expect <<EOF
          spawn scp -o StrictHostKeyChecking=no "./release/out/Offboard Studio-${{ needs.create_tag.outputs.package_version }}-*.dmg" ${{ secrets.SF_USERNAME }}@frs.sourceforge.net:/home/frs/project/${{ secrets.SF_PROJECT }}/release${{ needs.create_tag.outputs.package_version }}/
          expect "Password:"
          send "${{ secrets.SF_PASSWORD }}\r"
          expect eof
          EOF

  release_linux:
    needs: [create_tag]
    runs-on: ubuntu-latest
    env:
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Set git to be case-sensitive
        run: git config core.ignorecase false
      - name: Install dependencies
        run: npm install --legacy-peer-deps --no-audit --prefer-offline
      - name: Run build app
        run: NODE_ENV=production npm run build:app
      - name: Run package electron app for linux
        run: NODE_ENV=production npm run package:electron-app:linux
        env:
          NODE_ENV: production
      - name: List output files
        run: ls -R ./release/out || echo "No files found"

      - name: Release linux build
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.create_tag.outputs.package_version }}
          files: |
            ./release/out/Offboard Studio-${{ needs.create_tag.outputs.package_version }}-arm64.AppImage
            ./release/out/Offboard Studio-${{ needs.create_tag.outputs.package_version }}.AppImage
            ./docs/Help-guide.docx
      - name: Upload to SourceForge via scp with password (sshpass)
        if: ${{ success() }}
        shell: bash
        env:
          SF_USERNAME: ${{ secrets.SF_USERNAME }}
          SF_PASSWORD: ${{ secrets.SF_PASSWORD }}
          SF_PROJECT: ${{ secrets.SF_PROJECT }}
        run: |
          sudo apt-get update && sudo apt-get install -y sshpass

          REMOTE_PATH="/home/frs/project/${SF_PROJECT}/release${{ needs.create_tag.outputs.package_version }}"

          sshpass -p "$SF_PASSWORD" ssh -o StrictHostKeyChecking=no "$SF_USERNAME@frs.sourceforge.net" "mkdir -p \"$REMOTE_PATH\""

          sshpass -p "$SF_PASSWORD" scp -o StrictHostKeyChecking=no \
            "./release/out/Offboard Studio-${{ needs.create_tag.outputs.package_version }}-arm64.AppImage" \
            "./release/out/Offboard Studio-${{ needs.create_tag.outputs.package_version }}.AppImage" \
            "$SF_USERNAME@frs.sourceforge.net:\"$REMOTE_PATH/\""

